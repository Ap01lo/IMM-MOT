basic:
  split: 'val'         # dataset split, val/test
  has_velo: True       # whether detector has velo info
  LiDAR_interval: 0.5  # the interval between two adjacent frames of the LiDAR scan, NuScenes: 2HZ
  CLASS_NUM: 7         # number of tracking category, NuScenes: 7


preprocessing:
  DBSE: True
  SF_thre: {0: 0.14, 3: 0.16, 1: 0,    2: 0.16, 5: 0.1,  6: 0,    4: 0.16}


  NMS_thre: 0.08
  NMS_type: blend_nms  # blend_nms, no_blend_nms, blend_soft_nms
  NMS_metric: iou_bev  # iou_bev, iou_3d, giou_bev, giou_3d, d_eucl

association:
  category_metrics: {1: 'giou_bev', 0: 'giou_3d', 2: 'giou_3d', 3: 'giou_3d', 4: 'giou_3d', 5: 'giou_3d', 6: 'giou_3d'}
  second_metric: 'giou_bev'
  two_stage: True  # Whether to use two-stage data association
  first_thre: {1: 1.34, 0: 1.55, 2: 1.31, 3: 1.44, 4: 1.69, 5: 1.25, 6: 1.21}  # category-specific one-stage thresholds
  second_thre: {0: 1.0}  # two-stage thresholds
  algorithm : 'Hungarian'  # Greedy, Hungarian, Mutual Nearest Neighbor(MNN)

motion_model:
  filter: {0: 'IMMFilter', 1: 'IMMFilter', 2: 'IMMFilter', 3: 'IMMFilter', 4: 'ExtendKalmanFilter', 5: 'LinearKalmanFilter', 6: 'IMMFilter'}
  model: {0: 'BICYCLE', 1: 'CTRA',  2: 'CTRA', 3: 'BICYCLE', 4: 'CTRA', 5: 'CA', 6: 'CTRA'}
  mu: {0:[0.01, 0.01, 0.01, 0.97],
      1:[0.01, 0.01, 0.03, 0.95],
      2:[0.04, 0.04, 0.12, 0.8],
      3:[0.4, 0.4, 0.1, 0.1],
      4:[0.4, 0.4, 0.1, 0.1],
      5:[0.04, 0.88, 0.04, 0.04],
      6:[0.04, 0.04, 0.42, 0.5]}
      
  M:  {0:[[0.95, 0.02, 0.02, 0.01], 
          [0.02, 0.95, 0.01, 0.02], 
          [0.02, 0.01, 0.95, 0.02],
          [0.01, 0.02, 0.02, 0.95]],
      1:[[0.95, 0.02, 0.02, 0.01], 
         [0.02, 0.95, 0.01, 0.02], 
         [0.02, 0.01, 0.95, 0.02],
         [0.01, 0.02, 0.02, 0.95]],
      2:[[0.95, 0.02, 0.02, 0.01], 
         [0.02, 0.95, 0.01, 0.02], 
         [0.02, 0.01, 0.95, 0.02],
         [0.01, 0.02, 0.02, 0.95]],
      3:[[0.6, 0.3, 0.05, 0.05],   
         [0.3, 0.6, 0.05, 0.05],
         [0.05, 0.05, 0.8, 0.1], 
         [0.05, 0.05, 0.1, 0.8]],
      4:[[0.95, 0.02, 0.02, 0.01], 
         [0.02, 0.95, 0.01, 0.02], 
         [0.02, 0.01, 0.95, 0.02],
         [0.01, 0.02, 0.02, 0.95]],
      5:[[0.95, 0.02, 0.02, 0.01], 
         [0.02, 0.95, 0.01, 0.02], 
         [0.02, 0.01, 0.95, 0.02],
         [0.01, 0.02, 0.02, 0.95]],
      6:[[0.95, 0.02, 0.02, 0.01], 
         [0.02, 0.95, 0.01, 0.02], 
         [0.02, 0.01, 0.95, 0.02],
         [0.01, 0.02, 0.02, 0.95]]
      }


life_cycle:
  max_age:    {0: 10,   1: 10,  2: 15,  3: 20,  4: 10,   5: 10,   6: 20}
  min_hit:    {0: 1,    1: 1,   2: 1,   3: 1,   4: 1,    5: 1,    6: 1}
  decay_rate: {0: 0.05, 1: 0.3, 2: 0.2, 3: 0.1, 4: 0.15, 5: 0.15, 6: 0.25}

  algorithm:       {0: 'CB', 1: 'DW', 2: 'DW', 3: 'CB', 4: 'DW', 5: 'DW', 6: 'CB'}
  active_thres:    {0: 0.6,  1: 0.4,  2: 0.3,  3: 0.4,  4: 0.3, 5: 0.6, 6: 0.5}
  tentative_thres: {0: 0.02, 1: 0.05, 2: 0.05, 3: 0.02, 4: 0.1, 5: 0.1, 6: 0.08}

output:
  punish_num: {0: 1, 1: 1, 2: 0, 3: 1, 4: 0, 5: 0, 6: 1}
  post_nms: True     # whether to use post-nms, this feature is used to reduce FP prediction
  NMS_thre: 0.08
  NMS_type: blend_nms   # blend_nms, no_blend_nms, blend_soft_nms
  NMS_metric: iou_bev   # iou_bev, iou_3d, giou_bev, giou_3d, d_eucl

debug:
  is_debug: true # Whether to debug the code

